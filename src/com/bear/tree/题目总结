每个结点都有三次访问的机会
    1： 第一次遇到该结点
    2： 从左子树返回该结点
    3： 从右子树返回该结点，将要离开该结点

100： 相同的树
    1. dfs1, 在第一个遇到这个节点的时候就可以判断当前节点是否相等，然后递归去左和右

222： 完全二叉树的节点个数：
    1. dfs3 可以使用暴力遍历来做，使用自底向上的思路来做，第三次遇到节点的时候把左右子返回的结果+1返回
    2. 利用完全二叉树的性质来二分查找. 每个结点的数字，比如 100， 看后两位，0表示向左移动，1表示向右移动。  0-左 1-右
    如果与上一层的10取与一下，如果等于0表示向左，不等于0表示向右，非常之秒啊

101： 对称二叉树
    1. dfs1, 传入两个节点，分别比较两个节点的左右即可，节点1的左和节点2的右， 节点2的左和节点1的右

226: 翻转二叉树
    1. dfs1 第一次访问节点的时候直接交换左右子树
    2. dfs3 最后一个访问节点的时候交换左右子树（dfs要返回节点）

563: 二叉树的坡度
    1. dfs3 dfs返回子树节点和，操作是累加左右子树和的差。